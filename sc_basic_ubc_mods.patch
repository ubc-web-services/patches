diff --git a/sc_basic/LICENSE.txt b/sc_basic/LICENSE.txt
old mode 100644
new mode 100755
diff --git a/sc_basic/css/shortcodestyles.css b/sc_basic/css/shortcodestyles.css
new file mode 100755
index 0000000..189c434
--- /dev/null
+++ b/sc_basic/css/shortcodestyles.css
@@ -0,0 +1,133 @@
+.col-1-8 { width: 8.5%; }
+.col-1-7 { width: 10.85%; }
+.col-1-6 { width: 13.32%; }
+.col-1-5 { width: 16.8%; }
+.col-1-4 { width: 22%; }
+.col-1-3 { width: 30.66%; }
+.col-1-2 { width: 48%; }
+.col-2-3 { width: 65.33%; }
+.col-3-4 { width: 74%; }
+.col-2-5 { width: 37.6%; }
+.col-3-5 { width: 58.4%; }
+.col-4-5 { width: 79.2%; }
+.col-5-6 { width: 82.67%; }
+.col-100 {
+  width: 100%;
+  margin-left: 0;
+  margin-right: 0; }
+*[class|="col"] {
+  margin-right: 4%;
+  margin-bottom: 2em;
+  float: left; }
+*[class|="col"].float-right {
+  float: right;
+  margin-left: 4%;
+  margin-right: 0; }
+.col-last { margin-right: 0; }
+
+@media screen and (max-width:500px) {
+*[class|="col"] {
+  width: 100%;
+  margin-bottom: 1.75em;
+  margin-left: 0;
+  margin-right: 0;
+  float: none; }
+}
+
+/* Style for planning.ubc.ca
+.accordion {
+	margin-bottom: 20px;
+}
+
+.accordion-toggle:hover, .accordion-toggle.expanded {
+	background-color: #78a22f;
+}
+
+h3.accordion-toggle, .date-heading h3 {
+	border-bottom: 0;
+}
+
+.accordion-toggle {
+	cursor: pointer;
+	background-color: #0079c1;
+	color: #fff;
+	font-size: 1.25em;
+	padding: .25em .5em;
+}
+
+.accordion-toggle.expanded:before {
+	content: '-';
+}
+
+.accordion-toggle:before {
+	display: block;
+	float: right;
+	content: '+';
+	line-height: 16px;
+	padding: 2px;
+	margin: 3px .5em 0 0;
+	font-family: "myriad-pro-n9","myriad-pro",sans-serif;
+	font-style: normal;
+	font-weight: 900;
+	width: 20px;
+	height: 20px;
+	color: #fff;
+	text-align: center;
+}
+
+.accordion-content.default {
+	display: block;
+}
+
+.accordion-content {
+	display: none;
+}
+
+.accordion-content {
+	border-bottom: 1px solid #b2e2e7;
+}*/
+
+/*Style for utown.ubc.ca*/
+.accordion {
+	margin-bottom: 20px;
+}
+
+h3.accordion-toggle {
+	font-size: 1.200em;
+}
+
+.accordion-toggle {
+	cursor: pointer;
+}
+
+.accordion-toggle:before {
+	display: block;
+	float: left;
+	content: '+';
+	line-height: 12px;
+	padding: 2px;
+	margin: 3px .5em 0 0;
+	font-family: "myriad-pro-n6","myriad-pro",sans-serif;
+	font-style: normal;
+	font-weight: 600;
+	width: 16px;
+	height: 16px;
+	background-color: #002145;
+	color: #fff;
+	cursor: pointer;
+	-webkit-border-radius: 12px;
+	-moz-border-radius: 12px;
+	border-radius: 12px;
+	text-align: center;
+}
+
+.accordion-toggle:before {
+	behavior: url(/sites/utown.ubc.ca/themes/utown/js/lib/pie1.0/PIE.htc);
+	position: relative;
+}
+
+.accordion-content {
+	display: none;
+	padding-left: 36px;
+	font-size: .933em;
+}
\ No newline at end of file
diff --git a/sc_basic/sc_basic.info b/sc_basic/sc_basic.info
old mode 100644
new mode 100755
index 6d1f849..2d1e516
--- a/sc_basic/sc_basic.info
+++ b/sc_basic/sc_basic.info
@@ -1,6 +1,6 @@
-name = Shortcode Library: Basic Tags
-description = Provides basic shortcode tags like columns, toggle, tabs, highlight, dropcap, etc.
-package = Shortcode
+name = Shortcode Library: Basic Tags - UBC IT Modification
+description = Provides Accordion and Column shortcode tags.
+package = UBC IT
 core = 7.x
 dependencies[] = filter
 dependencies[] = shortcode
diff --git a/sc_basic/sc_basic.module b/sc_basic/sc_basic.module
index a820609..d9776b2 100755
--- a/sc_basic/sc_basic.module
+++ b/sc_basic/sc_basic.module
@@ -6,7 +6,7 @@
  */
 function sc_basic_preprocess_page(&$variables) {
   $path = drupal_get_path('module', 'sc_basic');
-  drupal_add_css($path . '/styling/css/shortcodes.css', array('group' => CSS_THEME));
+  drupal_add_css($path . '/css/shortcodestyles.css', array('group' => CSS_DEFAULT));
 }
 
 /**
@@ -25,85 +25,6 @@ function sc_basic_shortcode_info() {
     'attributes callback' => 'sc_basic_columns_attributes',
   );
 
-  $shortcodes['button'] = array(
-    'title' => t('Button'),
-    'description' => t('creates a fancy button that links to somewhere.'),
-    'process callback' => 'sc_basic_button',
-    'tips callback' => 'sc_basic_button_tips',
-    'default settings' => array(),
-    'attributes callback' => 'sc_basic_button_attributes',
-  );
-
-  $shortcodes['box'] = array(
-    'title' => t('Box'),
-    'description' => t('Side-boxes, blockquotes and pullquotes'),
-    'process callback' => 'sc_basic_box',
-    'tips callback' => 'sc_basic_box_tips',
-    'default settings' => array(),
-    'attributes callback' => 'sc_basic_box_attributes',
-  );
-
-  $shortcodes['highlight'] = array(
-    'title' => t('highlight'),
-    'description' => t('highlight an inline text'),
-    'process callback' => 'sc_basic_highlight',
-    'tips callback' => 'sc_basic_highlight_tips',
-    'default settings' => array(),
-    'attributes callback' => 'sc_basic_highlight_attributes',
-  );
-
-  $shortcodes['divider'] = array(
-    'title' => t('divider'),
-    'description' => t('divider'),
-    'process callback' => 'sc_basic_divider',
-    'tips callback' => 'sc_basic_divider_tips',
-    'default settings' => array(),
-    'attributes callback' => 'sc_basic_divider_attributes',
-  );
-
-  $shortcodes['dropcap'] = array(
-    'title' => t('dropcap'),
-    'description' => t('dropcap shortcode'),
-    'process callback' => 'sc_basic_dropcap',
-    'tips callback' => 'sc_basic_dropcap_tips',
-    'default settings' => array(),
-  );
-
-  $shortcodes['dropshadow'] = array(
-    'title' => t('Drop Shadow'),
-    'description' => t('Add drop shadow to element'),
-    'process callback' => 'sc_basic_dropshadow',
-    'tips callback' => 'sc_basic_dropshadow_tips',
-    'default settings' => array(),
-    'attributes callback' => 'sc_basic_dropshadow_attributes',
-  );
-
-  $shortcodes['social'] = array(
-    'title' => t('Social links'),
-    'description' => t('List of icons and links to social networks'),
-    'process callback' => 'sc_basic_social',
-    'tips callback' => 'sc_basic_social_tips',
-    'default settings' => array(),
-    'attributes callback' => 'sc_basic_social_attributes',
-  );
-
-  $shortcodes['contact'] = array(
-    'title' => t('Contact information'),
-    'description' => t('Icon list of contact info'),
-    'process callback' => 'sc_basic_contact',
-    'tips callback' => 'sc_basic_contact_tips',
-    'default settings' => array(),
-    'attributes callback' => 'sc_basic_contact_attributes',
-  );
-
-  $shortcodes['teaser'] = array(
-    'title' => t('Teaser'),
-    'description' => t('creates an emphasized teaser paragraph.'),
-    'process callback' => 'sc_basic_teaser',
-    'tips callback' => 'sc_basic_teaser_tips',
-    'default settings' => array(),
-  );
-
   $shortcodes['toggle'] = array(
     'title' => t('Toggle'),
     'description' => t('JQuery toggle content'),
@@ -113,249 +34,31 @@ function sc_basic_shortcode_info() {
     'attributes callback' => 'sc_basic_toggle_attributes',
   );
 
-  // $shortcodes['tabs'] = array(
-  //   'title' => t('Tabs & Accordeons'),
-  //   'description' => t('JQuery toggle content'),
-  //   'process callback' => 'sc_basic_tabs',
-  //   'tips callback' => 'sc_basic_tabs_tips',
-  //   'default settings' => array(),
-  // );
+ /*$shortcodes['tabs'] = array(
+   'title' => t('Tabs & Accordions'),
+   'description' => t('JQuery toggle content'),
+   'process callback' => 'sc_basic_tabs',
+   'tips callback' => 'sc_basic_tabs_tips',
+   'default settings' => array(),
+ );
 
-  // $shortcodes['tab-item'] = array(
-  //   'title' => t('Tabs pane'),
-  //   'description' => t('converts inner contents to a tab.'),
-  //   'process callback' => 'sc_basic_tab_item',
-  //   'tips callback' => 'sc_basic_tab_item_tips',
-  //   'default settings' => array(),
-  // );
-
-  $shortcodes['icon-list'] = array(
-    'title' => t('Icon list'),
-    'description' => t('Lists with icons. Supports ul, ol and dl.'),
-    'process callback' => 'sc_basic_icon_list',
-    'tips callback' => 'sc_basic_icon_list_tips',
-    'default settings' => array(),
-  );
+ $shortcodes['tab-item'] = array(
+   'title' => t('Tabs pane'),
+   'description' => t('converts inner contents to a tab.'),
+   'process callback' => 'sc_basic_tab_item',
+   'tips callback' => 'sc_basic_tab_item_tips',
+   'default settings' => array(),
+ );*/
 
   return $shortcodes;
 }
 
 /** @file shortcodes.php
  *
- * Shortcode defenitions
- */
-
- /*============================================================================================*/
-/* Contact_info Shortcode
-/*============================================================================================*/
-
-/**
- *
- * Display contact information such as Name, Email, ...
- * @param $attrs
- * @param $content
+ * Shortcode definitions
  */
 
-function sc_basic_contact($attrs, $content = null) {
-  extract(shortcode_attrs(array(
-    'fullname' => '',
-    'address' => '',
-    'city' => '',
-    'state' => '',
-    'zip' => '',
-    'country' => '',
-    'phone' => '',
-    'email' => '',
-    ), $attrs));
-
-
-  $items = array();
-  $full_address = array();
-  if ($fullname) $full_address[] = $fullname;
-  if ($address) $full_address[] = $address;
-  if ($city) $full_address[] = $city;
-  if ($state) $full_address[] = $state;
-  if ($zip) $full_address[] = $zip;
-  if ($country) $full_address[] = $country;
-  $items[] = array('data' => implode(', ', $full_address), 'class' => array('address'));
-  if ($phone) $items[] = array('data' => $phone, 'class' => array('phone'));
-  if ($email) $items[] = array('data' => $email, 'class' => array('email'));
-
-  return theme('item_list',
-    array(
-      'items' => $items,
-      'title' => NULL,
-      'type' => 'ul',
-      'attributes' => array('class' => array('contact-info'))
-    )
-  );
-}
-
-function sc_basic_contact_tips($format, $long) {
-  $output = '[contact fullname="John Smith" address="Park lane 5" city="LA" state="California" zip="12345" phone="555-55-555" email="info@example.com"][/contact]';
-  return $output;
-}
-
-function sc_basic_contact_attributes($form, $form_state) {
-  $form['fullname'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Name'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'contact'),
-      ),
-    ),
-  );
-  $form['address'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Address'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'contact'),
-      ),
-    ),
-  );
-  $form['city'] = array(
-    '#type' => 'textfield',
-    '#title' => t('City'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'contact'),
-      ),
-    ),
-  );
-  $form['state'] = array(
-    '#type' => 'textfield',
-    '#title' => t('State / Province'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'contact'),
-      ),
-    ),
-  );
-  $form['zip'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Zip / Postal code'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'contact'),
-      ),
-    ),
-  );
-  $form['phone'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Phone number'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'contact'),
-      ),
-    ),
-  );
-  $form['email'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Email'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'contact'),
-      ),
-    ),
-  );
-  return $form;
-}
-
-function sc_basic_social($attrs, $content = null) {
-  $attributes = array();
-  $icon_path = drupal_get_path('module', 'sc_basic') . '/styling/icons/social/mono';
-  $files = file_scan_directory($icon_path, '/\.(jpg|gif|png?)$/');
-  asort($files);
-  foreach ($files as $file) {
-    $attributes[$file->name] = '';
-  }
-  shortcode_attrs($attributes, $attrs);
-  if (isset($attrs['type'])) {
-    $type = 'inline';
-    unset($attrs['type']);
-  }
-  $items = array();
 
-  foreach ($attrs as $name => $content) {
-    if (strpos($content, '|')) {
-      $content_array = explode('|', $content);
-      $text = $content_array[1];
-      $url = $content_array[0];
-    }
-    else {
-      $url = $content;
-      $text = FALSE;
-    }
-    $link = explode('|', $content);
-    $items[] = array('data' => l($text, $url), 'class' => array($name), 'title' => ucfirst($name));
-  }
-
-  $classes = array('social-links');
-  if (isset($type)) $classes[] = $type;
-
-  return theme('item_list',
-    array(
-      'items' => $items,
-      'title' => NULL,
-      'type' => 'ul',
-      'attributes' => array('class' => $classes)
-    )
-  );
-}
-
-function sc_basic_social_tips($format, $long) {
-  $output = '[social type="inline" Skype="http://google.com" Twitter="http://google.com" Facebook="http://google.com" Drupal="http://google.com"][/social]';
-  return $output;
-}
-
-function sc_basic_social_attributes($form, $form_state) {
-  $icon_path = drupal_get_path('module', 'sc_basic') . '/styling/icons/social/mono';
-  $files = file_scan_directory($icon_path, '/\.(jpg|gif|png?)$/');
-  asort($files);
-  $form['type'] = array(
-    '#type' => 'select',
-    '#title' => t('Layout'),
-    '#options' => array(
-      '' => t('Stacked'),
-      'inline' => t('Inline'),
-    ),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'social'),
-      ),
-    ),
-  );
-  foreach ($files as $file) {
-    $bg_images[$file->uri] = $file->name;
-    $form[$file->name] = array(
-      '#type' => 'textfield',
-      '#title' => $file->name,
-      '#size' => 60,
-      '#states' => array(
-        'visible' => array(
-          ':input[name="shortcode"]' => array('value' => 'social'),
-        ),
-      ),
-    );
-  }
-  return $form;
-}
 
 /*============================================================================================*/
 /* Columns
@@ -386,7 +89,7 @@ function sc_basic_columns( $attrs, $content = null ) {
  */
 
 function sc_basic_columns_tips($format, $long) {
-  $output = '[col width="1-2"]your[/col][col width="1-2" last=1]content[/col]';
+  $output = '[col width="1-2"]First Column Text[/col][col width="1-2" last=1]Second Column Text[/col]';
   return $output;
 }
 
@@ -462,479 +165,7 @@ function sc_basic_columns_attributes($form, $form_state) {
   return $form;
 }
 
-/**
- * Drop shadows
- */
-
-function sc_basic_dropshadow( $attrs, $content = null ) {
-  extract(shortcode_attrs(array(
-  'type'      => '',
-  ), $attrs));
-
-  $classes = array();
-  $classes[] = 'dropshadow';
-  if ($type == '') $classes[] = 'raised';
-  if ($type == 2) $classes[] = 'perspective';
-  if ($type == 3) $classes[] = 'lifted';
-  if ($type > 3) $classes[] = 'curved';
-  if ($type == 4) $classes[] = 'curved-hz1';
-  if ($type == 5) $classes[] = 'curved-hz2';
-  if ($type == 6) $classes[] = 'curved-vt2';
-
-  $classes = trim(implode(' ', $classes));
-
-  return '<div class="' . $classes . '">' . $content . '</div>';
-}
-
-function sc_basic_dropshadow_tips($format, $long) {
-  $output = '[dropshadow]your content[/dropshadow]';
-  return $output;
-}
-
-function sc_basic_dropshadow_attributes($form, $form_state) {
-  $form['type'] = array(
-    '#type' => 'select',
-    '#title' => t('Drop shadow type'),
-    '#options' => array(
-      '' => t('Regular'),
-      2 => t('Perspective'),
-      3 => t('Lifted corners'),
-      4 => t('Curve'),
-      5 => t('Double curve'),
-      6 => t('Side shadows'),
-    ),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'dropshadow'),
-      ),
-    ),
-  );
-  return $form;
-}
-
-/*============================================================================================*/
-/* Divider Styles Shortcodes
-/*============================================================================================*/
-function sc_basic_divider($attrs, $content = null) {
-  extract(shortcode_attrs(array(
-    'type' => '',
-    ), $attrs));
-
-  $class = '';
-  if ($type) $class = ' class="' . $type . '"';
-
-  $output = '<hr' . $class . '>';
-  if ($type == 'top') $output .= '<a class="hr-toplink" href="#top">' . t('Back to Top ↑') . '</a>';
-
-  return $output;
-}
-
-function sc_basic_divider_tips($format, $long) {
-  $output = '[divider type="invisible|top"][/divider]';
-  return $output;
-}
-
-function sc_basic_divider_attributes($form, $form_state) {
-  $form['type'] = array(
-    '#type' => 'select',
-    '#title' => t('Divider style'),
-    '#options' => array(
-      '' => t('Regular'),
-      'invisible' => t('Invisible'),
-      'top' => t('Add "back to top" link'),
-    ),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'divider'),
-      ),
-    ),
-  );
-  return $form;
-}
-
-
-/*============================================================================================*/
-/* Dropcaps Shortcodes
-/*============================================================================================*/
-function sc_basic_dropcap( $attrs, $content = null ) {
-  $class = !empty($class) ? ' '.$class : '';
-  return '<span class="dropcap">' . check_plain($content)  . '</span>';
-}
-
-
-
-function sc_basic_dropcap_tips($format, $long) {
-  $output = '[dropcap]Y[/dropcap]our content...';
-  return $output;
-}
-
-/*============================================================================================*/
-/* Teaser Shortcodes
-/*============================================================================================*/
-function sc_basic_teaser( $attrs, $content = null ) {
-
-  $type = !empty($type) && in_array($type, array('normal', 'large')) ? $type : 'normal';
-  return '<p class="teaser">' . $content . '</p>';
-}
-
-function sc_basic_teaser_tips($format, $long) {
-  $output = '[teaser]Your content[/teaser]';
-  return $output;
-}
-
-/*============================================================================================*/
-/* Button Shortcode
-/*============================================================================================*/
-function sc_basic_button( $attrs, $content = null ) {
-  extract(shortcode_attrs(array(
-  'url'        => '',
-  'size'       => '',
-  'background' => '',
-  'text'       => '',
-  'align'      => '',
-  'target'     => '',
-  'class'      => '',
-  'width'      => '',
-  'last'       => '',
-  ), $attrs));
-
-  $style = '';
-  if ($background) $style .= "background-color: $background;";
-  if ($text) $style .= "color: $text;";
-
-  $classes = array();
-  if ($width) $classes[] = 'col-' . $width;
-  if ($last) $classes[] = 'col-last';
-  $classes[] = 'sc-button';
-  $classes[] = 'sc-button-' . $size;
-  if ($align == 'right') $classes[] = 'float-right';
-  if ($align == 'center') $classes[] = 'align-center';
-  // $classes[] = !empty($class) ?  explode(' ', $class) : null;
-
-  return l($content, $url, array(
-    'attributes' => array(
-      'class' => $classes,
-      'style' => $style,
-      'target' => $target,
-    ),
-    'html' => TRUE,
-  )
-  );
-}
-
-function sc_basic_button_tips($format, $long) {
-  $output = '[button url="http://www.sooperthemes.com" background=Crimson text=Gold size="3" align="center" target="_blank" width="2-3"]2/3rds Button, centred[/button]';
-  return $output;
-}
-
-function sc_basic_button_attributes($form, $form_state) {
-  $form['url'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Link url'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'button'),
-      ),
-    ),
-  );
-  $form['size'] = array(
-    '#type' => 'select',
-    '#title' => t('Button size'),
-    '#options' => array(
-      1 => t('size 1'),
-      2 => t('size 2'),
-      3 => t('size 3'),
-      4 => t('size 4'),
-    ),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'button'),
-      ),
-    ),
-  );
-  $form['background'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Optionally choose a custom background color'),
-    '#description' => t('Must be a valid CSS color. <a href="http://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/">List of named colors</a>.'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'button'),
-      ),
-    ),
-  );
-  $form['text'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Optionally choose a custom text color'),
-    '#description' => t('Must be a valid CSS color.'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'button'),
-      ),
-    ),
-  );
-  $form['align'] = array(
-    '#type' => 'select',
-    '#title' => t('Alignment of element'),
-    '#options' => array(
-      '' => t('Left'),
-      'right' => t('Right'),
-      'center' => t('Center'),
-    ),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'button'),
-      ),
-    ),
-  );
-  $form['target'] = array(
-    '#type' => 'select',
-    '#title' => t('Link target'),
-    '#options' => array(
-      '' => t('_self'),
-      '_blank' => t('_blank'),
-      '_parent' => t('_parent'),
-      '_top' => t('_top'),
-    ),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'button'),
-      ),
-    ),
-  );
-  $form['width'] = array(
-    '#type' => 'select',
-    '#title' => t('Column width'),
-    '#options' => array(
-      '' => t('Auto'),
-      '1-8' => t('1/8'),
-      '1-7' => t('1/7'),
-      '1-6' => t('1/6'),
-      '1-5' => t('1/5'),
-      '1-4' => t('1/4'),
-      '1-3' => t('1/3'),
-      '1-2' => t('1/2'),
-      '2-3' => t('2/3'),
-      '3-4' => t('3/4'),
-      '2-5' => t('2/5'),
-      '3-5' => t('3/5'),
-      '4-5' => t('4/5'),
-      '5-6' => t('5/6'),
-      '100' => t('100'),
-    ),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'button'),
-      ),
-    ),
-  );
-  return $form;
-}
-
-/*============================================================================================*/
-/* box Shortcode
-/*============================================================================================*/
-function sc_basic_box( $attrs, $content = null ) {
-  extract(shortcode_attrs(array(
-  'type'       => 1,
-  'background' => '',
-  'text'       => '',
-  'align'      => '',
-  'width'      => '',
-  'last'      => '',
-  'clear'      => '',
-  'class'      => '',
-  ), $attrs));
-
-  $style = '';
-  if ($background) $style .= "background-color: $background;";
-  if ($text) $style .= "color: $text;";
-  if ($clear) $style .= "clear: $clear;";
-
-  if ($style) $style = ' style="' . $style . '"';
-
-  $classes = array();
-  if ($width) $classes[] = 'col-' . $width;
-  if ($last) $classes[] = 'col-last';
-  if ($type == 'quote') {
-    $tag = 'blockquote';
-    if (!$width) $classes[] = 'grid-1-2';
-  } else {
-    $tag = 'aside';
-    $classes[] = 'block';
-  }
-
-  $classes[] = 'box';
-  $classes[] = 'box-' . $type;
-  if ($align == 'right') $classes[] = 'float-right';
-  if ($align == 'center') $classes[] = 'align-center';
-  $classes[] = !empty($class) ?  explode(' ', $class) : null;
-  $classes = trim(implode(' ', $classes));
-
-  return '<' . $tag . ' class="' . $classes . '"' . $style . '>' . $content . "</$tag>";
-}
-
-function sc_basic_box_tips($format, $long) {
-  $output = '[box background=tomato text=white align=right width="1-4"]your content here[/box]';
-  return $output;
-}
-
-function sc_basic_box_attributes($form, $form_state) {
-  $form['type'] = array(
-    '#type' => 'select',
-    '#title' => t('Type'),
-    '#options' => array(
-      1 => t('Normal'),
-      'note' => t('Note'),
-      'quote' => t('Blockquote'),
-    ),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'box'),
-      ),
-    ),
-  );
-  $form['align'] = array(
-    '#type' => 'select',
-    '#title' => t('Alignment of element'),
-    '#options' => array(
-      '' => t('Left'),
-      'right' => t('Right'),
-      'center' => t('Center'),
-    ),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'box'),
-      ),
-    ),
-  );
-  $form['width'] = array(
-    '#type' => 'select',
-    '#title' => t('Column width'),
-    '#options' => array(
-      '' => t('Auto'),
-      '1-8' => t('1/8'),
-      '1-7' => t('1/7'),
-      '1-6' => t('1/6'),
-      '1-5' => t('1/5'),
-      '1-4' => t('1/4'),
-      '1-3' => t('1/3'),
-      '1-2' => t('1/2'),
-      '2-3' => t('2/3'),
-      '3-4' => t('3/4'),
-      '2-5' => t('2/5'),
-      '3-5' => t('3/5'),
-      '4-5' => t('4/5'),
-      '5-6' => t('5/6'),
-    ),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'box'),
-      ),
-    ),
-  );
-  $form['background'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Optionally choose a custom background color'),
-    '#description' => t('Must be a valid CSS color. <a href="http://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/">List of named colors</a>.'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'box'),
-      ),
-    ),
-  );
-  $form['text'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Optionally choose a custom text color'),
-    '#description' => t('Must be a valid CSS color.'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'box'),
-      ),
-    ),
-  );
-  return $form;
-}
-
-/*============================================================================================*/
-/* highlight Shortcode
-/*============================================================================================*/
-function sc_basic_highlight( $attrs, $content = null ) {
-  extract(shortcode_attrs(array(
-  'type'      => '',
-  'background'      => '',
-  'text'      => '',
-  'class'      => '',
-  ), $attrs));
-
-  $style = '';
-  if ($background) $style .= "background-color: $background;";
-  if ($text) $style .= "color: $text;";
-
-  if ($style) $style = ' style="' . $style . '"';
-
-  $classes = array();
-  $classes[] = ($type == 2) ?  'highlight2' : 'highlight';
-  $classes[] = !empty($class) ?  explode(' ', $class) : null;
-  $classes = trim(implode(' ', $classes));
 
-  return '<span class="' . $classes . '"' . $style . '>' . $content . '</span>';
-}
-
-function sc_basic_highlight_tips($format, $long) {
-  $output = '[highlight type=2 background="yellow" text="black"]your text here[/highlight]';
-  return $output;
-}
-
-function sc_basic_highlight_attributes($form, $form_state) {
-  $form['type'] = array(
-    '#type' => 'select',
-    '#title' => t('Highlight style'),
-    '#options' => array(
-      '' => t('Normal highlight'),
-      2 => t('Rounded highlight'),
-    ),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'highlight'),
-      ),
-    ),
-  );
-  $form['background'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Optionally choose a custom background color'),
-    '#description' => t('Must be a valid CSS color. <a href="http://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/">List of named colors</a>.'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'highlight'),
-      ),
-    ),
-  );
-  $form['text'] = array(
-    '#type' => 'textfield',
-    '#title' => t('Optionally choose a custom text color'),
-    '#description' => t('Must be a valid CSS color.'),
-    '#size' => 30,
-    '#maxlength' => 30,
-    '#states' => array(
-      'visible' => array(
-        ':input[name="shortcode"]' => array('value' => 'highlight'),
-      ),
-    ),
-  );
-  return $form;
-}
 
 
 /*============================================================================================*/
@@ -945,19 +176,27 @@ function sc_basic_toggle( $attrs, $content = null ) {
   'title'      => '',
   'expanded'      => FALSE,
   ), $attrs));
-
+  //$collapsed = '';
+  
   $classes = array();
   if ($expanded) {
-    $classes[] = 'expanded';
+    $classes[] = 'default';
+    //$collapsed[] = ' ';
   }
   else {
-    $collapsed = ' default-collapsed';
+    $classes[] = '';
+    //$collapsed[] = ' default-collapsed';
   }
 
   $classes = implode(' ', $classes);
 
-  $out =  '<div class="toggle' . $collapsed . '"><h3 class="' . $classes . '" onclick="$(this).toggleClass(\'expanded\').next().toggle(\'fast\');" ><a href="##">' . $title . '</a></h3>';
+ /* $out =  '<div class="toggle' . $collapsed . '"><h3 class="' . $classes . '" onclick="$(this).toggleClass(\'expanded\').next().toggle(\'fast\');" ><a href="##">' . $title . '</a></h3>';
   $out .= '<div class="toggle-content clearfix">' . $content . '</div>';
+  $out .= '</div>';*/
+	
+	
+  $out =  '<div class="accordion"><h3 class="accordion-toggle">' . $title . '</h3>';
+  $out .= '<div class="accordion-content ' . $classes . ' clearfix">' . $content . '</div>';
   $out .= '</div>';
 
   return $out;
@@ -965,7 +204,7 @@ function sc_basic_toggle( $attrs, $content = null ) {
 
 
 function sc_basic_toggle_tips($format, $long) {
-  $output = '[toggle title="Show toggle shortcode"]Your content here[/toggle]';
+  $output = '[toggle title="Your Accordion Title"]Your content here[/toggle] (to make open by default, add "expanded=1" to the opening toggle)';
   return $output;
 }
 
@@ -998,99 +237,70 @@ function sc_basic_toggle_attributes($form, $form_state) {
   return $form;
 }
 
+
 // Quicktabs implementation is currently now working well because I don't know how to populate
 // Drupal.settings.quicktabs in a way that works well with caching.
 
 // /*============================================================================================*/
 // /* Jquery toggle content Shortcode
 // /*============================================================================================*/
-// function sc_basic_tabs( $attrs, $content = null ) {
-//   extract(shortcode_attrs(array(
-//   'type'      => '',
-//   ), $attrs));
-
-//   if (!function_exists('quicktabs_build_quicktabs')) {
-//     drupal_set_message(t('You must enable the quicktabs module to use the tabs shortcode'), 'error');
-//     return;
-//   }
-
-//   if (($type == 'accordion' OR $type == 'accordeon')) {
-//     $settings = array(
-//       'renderer' => 'accordion',
-//       'options' => array (
-//         'history' => 0,
-//         'jquery_ui' => array(
-//           'autoHeight' => 0,
-//           'collapsible' => 0,
-//         ),
-//       ),
-//     );
-//   } else {
-//     $settings = array();
-//   }
-
-//   global $shortcode_tabs_stack;
-//   $output = drupal_render(quicktabs_build_quicktabs(rand(), $settings, $shortcode_tabs_stack));
-//   $shortcode_tabs_stack = null;
-//   return $output;
-// }
-
-
-// function sc_basic_tabs_tips($format, $long) {
-//   $output = '[tabs][tab-item title="Your title"]Your content[/tab-item][tab-item title="Next title"]Next content[/tab-item][/tabs]';
-//   return $output;
-// }
-// function sc_basic_tab_item( $attrs, $content = null ) {
-//   extract(shortcode_attrs(array(
-//   'title'      => '',
-//   ), $attrs));
-
-//   // Unfortunately there is currently no other way to pass arguments to the
-//   // tabs function #lame
-//   global $shortcode_tabs_stack;
-//   if (!is_array($shortcode_tabs_stack)) $shortcode_tabs_stack = array();
-//   $pane = array(
-//     'title' => $title,
-//     'contents' => array(
-//       '#markup' => $content,
-//     ),
-//     'weight' => count($shortcode_tabs_stack),
-//   );
-//   $shortcode_tabs_stack[] = $pane;
-// }
-
-
-// function sc_basic_tabs_item_tips($format, $long) {
-//   $output = '[tabs type=accordion][tab-item title="Your title"]Your content[/tab-item][tab-item title="Next title"]Next content[/tab-item][/tabs]';
-//   return $output;
-// }
-
-
-/*============================================================================================*/
-/* List style Shortcode
-/*============================================================================================*/
-function sc_basic_icon_list( $attrs, $content = null ) {
-
+/*function sc_basic_tabs( $attrs, $content = null ) {
   extract(shortcode_attrs(array(
-  'type'     => '',
+  'type'      => '',
   ), $attrs));
 
+  if (!function_exists('quicktabs_build_quicktabs')) {
+     drupal_set_message(t('You must enable the quicktabs module to use the tabs shortcode'), 'error');
+    return;
+   }
+
+  if (($type == 'accordion' OR $type == 'accordeon')) {
+     $settings = array(
+       'renderer' => 'accordion',
+       'options' => array (
+         'history' => 0,
+         'jquery_ui' => array(
+           'autoHeight' => 0,
+           'collapsible' => 0,
+        ),
+      ),
+     );
+   } else {
+     $settings = array();
+   }
+
+   global $shortcode_tabs_stack;
+   $output = drupal_render(quicktabs_build_quicktabs(rand(), $settings, $shortcode_tabs_stack));
+   $shortcode_tabs_stack = null;
+   return $output;
+ }
+ function sc_basic_tabs_tips($format, $long) {
+   $output = '[tabs][tab-item title="Your title"]Your content[/tab-item][tab-item title="Next title"]Next content[/tab-item][/tabs]';
+   return $output;
+ }
+ 
+ 
+ function sc_basic_tab_item( $attrs, $content = null ) {
+   extract(shortcode_attrs(array(
+   'title'      => '',
+  ), $attrs));
 
-  $types = array('sc-arrow', 'sc-buoy', 'sc-calendar', 'sc-clock', 'sc-pin', 'sc-play', 'sc-skip', 'sc-thumb', 'sc-tick', 'sc-tick-grey', 'sc-warning');
-
-
-  $type = trim(strtolower($type));
-  $classes = array();
-  $classes[] = 'sc-icon-list';
-  if (in_array($type, $types)) $classes[] = $type;
-
-  $classes = trim(implode(' ', $classes));
-  $output = preg_replace("/<(ul|ol|dl)[a-z0-9\"'=\s-_]*?>/","<ul class=\"$classes\">", $content);
-
-  return $output;
-}
-
-function sc_basic_icon_list_tips($format, $long) {
-  $output = '[icon-list type=sc-arrow|sc-buoy||sc-calendar|sc-clock|sc-pin|sc-arrow|sc-play|sc-skip|sc-thumb|sc-tick|sc-tick-grey|sc-warning]your list here[/icon-list]';
-  return $output;
-}
\ No newline at end of file
+//   // Unfortunately there is currently no other way to pass arguments to the
+//   // tabs function #lame
+   global $shortcode_tabs_stack;
+   if (!is_array($shortcode_tabs_stack)) $shortcode_tabs_stack = array();
+   $pane = array(
+     'title' => $title,
+     'contents' => array(
+       '#markup' => $content,
+     ),
+     'weight' => count($shortcode_tabs_stack),
+   );
+   $shortcode_tabs_stack[] = $pane;
+ }
+
+
+ function sc_basic_tabs_item_tips($format, $long) {
+   $output = '[tabs type=accordion][tab-item title="Your title"]Your content[/tab-item][tab-item title="Next title"]Next content[/tab-item][/tabs]';
+   return $output;
+ }*/
\ No newline at end of file
diff --git a/sc_basic/styling/css/shortcodestyles.css b/sc_basic/styling/css/shortcodestyles.css
new file mode 100755
index 0000000..41ffcae
--- /dev/null
+++ b/sc_basic/styling/css/shortcodestyles.css
@@ -0,0 +1,26 @@
+.col-1-8 { width: 8.5%; }
+.col-1-7 { width: 10.85%; }
+.col-1-6 { width: 13.32%; }
+.col-1-5 { width: 16.8%; }
+.col-1-4 { width: 22%; }
+.col-1-3 { width: 30.66%; }
+.col-1-2 { width: 48%; }
+.col-2-3 { width: 65.33%; }
+.col-3-4 { width: 74%; }
+.col-2-5 { width: 37.6%; }
+.col-3-5 { width: 58.4%; }
+.col-4-5 { width: 79.2%; }
+.col-5-6 { width: 82.67%; }
+.col-100 {
+  width: 100%;
+  margin-left: 0;
+  margin-right: 0; }
+*[class|="col"] {
+  margin-right: 4%;
+  margin-bottom: 2em;
+  float: left; }
+*[class|="col"].float-right {
+  float: right;
+  margin-left: 4%;
+  margin-right: 0; }
+.col-last { margin-right: 0; }
\ No newline at end of file
